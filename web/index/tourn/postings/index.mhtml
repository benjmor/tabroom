<%args>
	$tourn_id
	$person   => undef
	$round_id => undef
	$event_id => undef
</%args>
<%init>

	if ($round_id && ($r->hostname eq "www.tabroom.com")) {
		my $key = "ROUND_".$round_id;

		if ($ARGS{"invalidate"}) {
			return if $m->cache_self(
				key     => $key,
				expire  => $key
			);
		} else {
			return if $m->cache_self(
				key        => $key,
				expires_in => '5m',
			);
		}
	}

	my $tourn =  eval {
		return Tab::Tourn->retrieve($tourn_id);
	};

	unless ($tourn) {
		$m->comp("/funclib/abort.mas", message => "No tournament found for ID $tourn_id");
	}

	my $tz = "UTC";
	$tz = $tourn->tz;
	$tz =  $person->tz if $person;

	my @rounds = $m->comp(
		'/funclib/published_rounds.mas',
		tourn => $tourn
	);

	push (@rounds, $m->comp(
		'/funclib/listed_rounds.mas',
		tourn => $tourn)
	);

	my @events = sort {$a->name cmp $b->name} $tourn->events;
	my $event = shift @events if scalar @events == 1;
	$event_id = $event->id if $event;

	if ($event_id && (not defined $event)) {
		$event = Tab::Event->retrieve($event_id);
	}

    #uniq
	my %seen = ();
    @rounds = grep { ! $seen{$_->id} ++ } @rounds;

	my %events_with_rounds = ();

	my $current;

	my %min_by_type;
	my %minround_by_type;

	foreach my $round (@rounds) {

		next unless $round->published;

		push (@{$events_with_rounds{$round->event->id}}, $round);

		next unless $event_id == $round->event->id;

		if ($current < $round->name) {
			$round_id = $round->id;
			$current = $round->name;
		}

		if (
			$min_by_type{$round->type} > $round->name
			|| (not defined $min_by_type{$round->type})
		) {
			$min_by_type{$round->type} = $round->name;
			$minround_by_type{$round->type} = $round->id;
		}
	}

	if ($event && $event->setting("invert_postings")) {

		my $biggest_type;
		my $current;

		foreach my $type (keys %min_by_type) {
			if ($min_by_type{$type} > $current) {
				$biggest_type = $type;
				$current = $min_by_type{$type};
			}
		}
		$round_id = $minround_by_type{$biggest_type};
	}

    my $webpage = Tab::Webpage->search(
		tourn   => $tourn_id,
		special => "postings"
	)->first;

	my $switch;

</%init>

	<div class="main">

		<& /index/tourn/title.mas,
			tourn => $tourn
		&>

        <& /index/tourn/tabbar.mas,
			tourn => $tourn,
			person => $person
		&>

%		my $round = Tab::Round->retrieve($round_id) if $round_id;

%		if ($round) {

%			$m->redirect("/index/tourn/postings/round.mhtml?tourn_id=".$tourn->id."&round_id=".$round->id);

%		} elsif ($webpage) {

			<p>
				<% $webpage->content %>
			</p>

%		}

	</div>

	<& "menu.mas",
		tourn_id => $tourn_id,
		event_id => $event_id,
		round_id => $round_id
	&>

# At this point, tourn will be defined and should be used to grab the website title
<title>
Pairings - <% $tourn ?  $tourn->name : "" %> - Tabroom.com
</title>
