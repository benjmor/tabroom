<%args>
	$tourn
	$perms
	$tourn_settings
	$person
	$person_settings
	$event_id        => undef
	$round_highlight => undef
</%args>
<%init>

	Tab::Event->columns(TEMP => "supp");
	Tab::Event->columns(TEMP => "stefan");
	Tab::Event->columns(TEMP => "round_robin");
	Tab::Event->columns(TEMP => "weekend");

	Tab::Event->set_sql(schedule => "
		select event.*,
			supp.value as supp,
			stefan.value as stefan,
			round_robin.value as round_robin,
			weekend.value as weekend
		from event

			left join event_setting supp
				on supp.tag = 'supp'
				and supp.event = event.id

			left join event_setting stefan
				on stefan.tag = 'stefan'
				and stefan.event = event.id

			left join event_setting weekend
				on weekend.tag = 'weekend'
				and weekend.event = event.id

			left join event_setting round_robin
				on round_robin.tag = 'round_robin'
				and round_robin.event = event.id


		where event.tourn = ?

		order by event.type, supp.value, stefan.value, event.name
	");

	my @tourn_events = Tab::Event->search_schedule($tourn->id);
	my $event;

	@tourn_events = $m->comp(
		"/funclib/event_perms.mas",
		perms  => $perms,
		type   => "tabber",
		events => \@tourn_events
	);

	if ($event_id) {
		foreach my $ev (@tourn_events) {
			$event = $ev if $ev->id == $event_id;
		}
	}

	unless ($event) {
		$event = $tourn_events[0] if @tourn_events;
	}

	my %event_settings = $event->all_settings();

	$m->abort unless $event;
	$m->abort unless $event->category;

	my $dbh = Tab::DBI->db_Main();
	my $weekend_id = $event->weekend;
	my $event_type = $event->type;
	my $weekend;

	if ($weekend_id eq "nope") {
		$m->comp("/funclib/abort.mas",
			message => "This event is marked as 'Not Held' under the Dates menu.  Assign it to a weekend to continue"
		);
	} elsif ($weekend_id == int($weekend_id)) {
		$weekend = Tab::Weekend->retrieve($weekend_id);
	}

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now();

    my @days = $m->comp(
		"/funclib/tourn_days.mas",
		tourn   => $tourn,
	);

	my $type = $event->type;
	$type = "debate"
		if $type ne "speech"
		&& $type ne "congress";

	my $empty;

	my @protocols =
		sort {$a->name cmp $b->name}
		$tourn->protocols;

	Tab::Round->columns(TEMP => "r2_name");

	my @overlaps;
	my $async;
	my $warning;

	my $timeslot_limit;

	if ($weekend) {

		my $weekend_start = $weekend->start;
		my $weekend_end = $weekend->end;

		$weekend_start->subtract(hours => 6);
		$weekend_end->add(hours => 6);

		$timeslot_limit = " and timeslot.start < '".DateTime::Format::MySQL->format_datetime($weekend_end)."'";
		$timeslot_limit .= " and timeslot.end > '".DateTime::Format::MySQL->format_datetime($weekend_start)."'";
	}

	my $timeslot_sth = $dbh->prepare("
		select
			timeslot.id, timeslot.name,
			timeslot.start,
			timeslot.end
		from timeslot, tourn
		where timeslot.tourn = ?
			and tourn.id = timeslot.tourn
		$timeslot_limit
		order by timeslot.start, timeslot.name
	");

	$timeslot_sth->execute($tourn->id);

	my %timeslots;

	while (
		my (
			$tid, $name, $start, $end
		) = $timeslot_sth->fetchrow_array()
	) {
		$timeslots{$tid}{"name"}      = $name;
		$timeslots{$tid}{"raw_start"} = $start;
		$timeslots{$tid}{"raw_end"}   = $end;

		$timeslots{$tid}{"start"} = eval {
			my $dt = DateTime::Format::MySQL->parse_datetime($start);
			$dt->set_time_zone("UTC");
			$dt->set_time_zone($tz);
			return $dt;
		};
		$timeslots{$tid}{"end"} = eval {
			my $dt = DateTime::Format::MySQL->parse_datetime($end);
			$dt->set_time_zone("UTC");
			$dt->set_time_zone($tz);
			return $dt;
		};

		$timeslots{$tid}{"start_epoch"} = $timeslots{$tid}{"start"}->epoch();
		$timeslots{$tid}{"end_epoch"} = $timeslots{$tid}{"end"}->epoch();
	}

	$timeslot_sth->finish();

	my @sites;
	my %ok_sites;
	my $default_site;

	if (
		(
			$event_settings{"online_mode"} eq "public_jitsi"
			|| $event_settings{"online_mode"} eq "public_jitsi_observers"
			|| $event_settings{"online_mode"} eq "nsda_campus"
			|| $event_settings{"online_mode"} eq "nsda_campus_observers"
		) && (
			not defined $event_settings{"online_hybrid"}
		)
	) {

		$ok_sites{"all"}++;

	} else {

		if ($weekend) {
			push @sites, $weekend->site;
			$default_site = $weekend->site unless $default_site;
		} else {
			@sites = $m->comp(
				"/funclib/tourn_sites.mas",
				tourn => $tourn
			);
		}

		if (@sites) {
			%ok_sites = map {$_->id => 1} @sites;
			$default_site = $sites[0] unless $default_site;
		}
	}


	my $sth = $dbh->prepare("
		select
			round.id, round.name, round.label, round.type, round.published, round.flighted,
			site.id,
			protocol.id,
			online_mode.value,
			online_hybrid.value,
			round.timeslot,
			count(panel.id)
		from (round, event, tourn)

			left join site on round.site = site.id

			left join protocol
				on round.protocol = protocol.id

			left join event_setting online_mode
				on online_mode.event = event.id
				and online_mode.tag = 'online_mode'

			left join event_setting online_hybrid
				on online_hybrid.event = event.id
				and online_hybrid.tag = 'online_hybrid'

			left join panel on panel.round = round.id

		where event.id = ?
			and event.id = round.event
			and event.tourn = tourn.id
		group by round.id
		order by round.name
	");

	$sth->execute($event->id);

	my %round_by_timeslot;
	my %round_by_day;
	my %esets;

	my $update_site_sth = $dbh->prepare("update round set site = ? where id = ?");

	while (
		my (
			$round_id, $round_name, $round_label, $round_type, $round_published, $round_flighted,
			$site_id,
			$protocol,
			$online_mode_value,
			$online_hybrid_value,
			$timeslot_id,
			$count_panels
		) = $sth->fetchrow_array()
	) {

		$round_by_timeslot{$timeslot_id}{$round_id}{"number"} = $round_name;
		$round_by_timeslot{$timeslot_id}{$round_id}{"label"}  = $round_label;

		$round_by_timeslot{$timeslot_id}{$round_id}{"panels"}    = $count_panels;
		$round_by_timeslot{$timeslot_id}{$round_id}{"published"} = $round_published;
		$round_by_timeslot{$timeslot_id}{$round_id}{"flighted"}  = $round_flighted;

		if ($round_label) {
			$round_by_timeslot{$timeslot_id}{$round_id}{"name"} = $round_label;
		} else {
			$round_by_timeslot{$timeslot_id}{$round_id}{"name"} = "Round ".$round_name;
		}

		if ($timeslots{$timeslot_id}) {
			$round_by_day{$timeslots{$timeslot_id}{"start"}->day}++;
		}

		$round_by_timeslot{$timeslot_id}{$round_id}{"type"} = $round_type;
		$round_by_timeslot{$timeslot_id}{$round_id}{"site"} = $site_id;
		$round_by_timeslot{$timeslot_id}{$round_id}{"protocol"} = $protocol;

		$empty = "hidden" if $round_type eq "final";

		if ($online_mode_value eq "async") {
			$async++;
		}

		unless ($site_id
			|| (
				$online_mode_value ne "sync"
				&& (not defined $online_hybrid_value)
			)
		) {
			$warning .= "<br />" if $warning;
			$warning .= $round_by_timeslot{$timeslot_id}{$round_id}{"name"}." has no site assigned";
		}

		unless ($ok_sites{"all"} || $ok_sites{$site_id}) {

			$warning .= "<br />" if $warning;

			if ($default_site) {
				$update_site_sth->execute($round_id, $default_site->id);
				$warning .= $round_by_timeslot{$timeslot_id}{$round_id}{"name"}." is assigned to a site not attached ";
				$warning .= " to this tournament.  Updated to ".$default_site->name;
			} else {
				$warning .= $round_by_timeslot{$timeslot_id}{$round_id}{"name"}." is assigned to a site not attached ";
				$warning .= " to this tournament.  No valid site found for update";
			}
		}
	}

	unless ($event_settings{"online_mode"} eq "async") {

		Tab::Round->set_sql( overlaps => "

			select r1.*, r2.name as r2_name
			from round r1, timeslot t1,
				round r2, timeslot t2

			where r1.event = ?
			and r1.event = r2.event
			and r1.timeslot = t1.id
			and r2.timeslot = t2.id
			and r2.id != r1.id

			and t1.start < t2.end
			and t2.start < t1.end

			and not exists (
				select breakout1.value
				from round_setting breakout1
				where breakout1.tag = 'use_for_breakout'
				and breakout1.round = r1.id
			)

			and not exists (
				select breakout2.value
				from round_setting breakout2
				where breakout2.tag = 'use_for_breakout'
				and breakout2.round = r2.id
			)
		");

		@overlaps = Tab::Round->search_overlaps( $event->id );

	}

</%init>

	<script type="text/javascript">

		$(document).ready(function(){
			$('html,body').scrollTop(0);
		});

		function showMe (timeslotID) {
			$("."+timeslotID).toggleClass("hidden");
		}

		function toggleEmpties () {
			if ($("#toggle").val()  == "Hide Empty Slots") {
				$(".empty").addClass("hidden");
				$("#toggle").val("Show Empty Slots");
			} else {
				$(".empty").removeClass("hidden");
				$("#toggle").val("Hide Empty Slots");
			}
			$("table").trigger("applyWidgets");
		}


	</script>

%	my $current_day;

	<& menu.mas,
		tourn        => $tourn,
		tourn_events => \@tourn_events,
		perms        => $perms,
		event        => $event,
		days         => \@days
	&>

	<div class="main">

		<span class="half">
			<h4><% $event->abbr %> schedule</h4>
		</span>

		<span class="threetenths semibold rightalign">
			<% $weekend ? "Dates: ".$weekend->name : "" %>
		</span>

		<span class="sixth rightalign marno">
			<input
				type    = "button"
				id      = "toggle"
				class   = "thin"
				value   = "<% $empty ? "Show Empty Slots" : "Hide Empty Slots" %>"
				onclick = "toggleEmpties(this)"
			>

		</span>

		<span class="twenty marleft rightalign marno">
			<a
				href="print_event.mhtml?event_id=<% $event->id %>"
				class="fa fa-print buttonwhite redtext"
			></a>
		</span>

%		if ($warning) {

			<div class="semibold redtext bigger centeralign padbottommore">
				<h5>Warning!</h5>
				<% $warning %>

				<p class="martopmore fourfifths bluetext redborderbottom">
					To solve site errors, either change them below, add that
					site to this tournament again, or if you are using only 1
					site, remove the site from tournament and re-add it.
				</p>

			</div>
%		}

%		if (@overlaps) {
			<div class="semibold redtext bigger centeralign padbottommore">
				<h5>Rounds Overlap!</h5>

				<p class="martopmore fourfifths bluetext redborderbottom">
					The following rounds overlap each other's time blocks,
					which can lead to serious problems - no rooms or judges in
					one round will be placed in the other.
				</p>

				<p class="martopmore fourfifths bluetext redborderbottom">
					Adjust start/stop times for:
%					foreach my $overlap (@overlaps) {
%						$m->print($overlap->realname." ");
%					}
				</p>
			</div>
%		}

%		unless (keys %round_by_timeslot) {

			<form
				action="clone_schedule.mhtml"
				method="post"
			>

			<input
				type  = "hidden"
				name  = "destination_event_id"
				value = "<% $event->id %>"
			>

			<div class="centeralign full even nospace">
				<span class="quarter rightalign">
					Clone schedule of:
				</span>

				<span class="twofifths centeralign">
					<select name="source_event_id" class="fixedmost">
						<option value=""></option>
%						foreach my $other (@tourn_events) {
%							next if $event->id == $other->id;
%							next if $weekend && $other->weekend != $weekend;
							<option value="<% $other->id %>"><% $other->name %></option>
%						}
					</select>
				</span>

				<span class="leftalign quarter">
					<input
						type  = "submit"
						value = "Clone"
						class = "thin"
					>
				</span>
				</form>
			</div>
%		}

		<form
			action = "event_save.mhtml"
			method = "post"
		>

		<input
			type  = "hidden"
			name  = "event_id"
			value = "<% $event->id %>"
		>

<%perl>

			TIMESLOT:
			foreach my $timeslot_id (
				sort {
					$timeslots{$a}{"start_epoch"} <=> $timeslots{$b}{"start_epoch"}
				} keys %timeslots
			) {

				if (
					(not defined $current_day)
					|| ($current_day->day ne $timeslots{$timeslot_id}{"start"}->day)
				) {

					unless ($current_day) {
						$m->print("</tbody></table>");
					}

					$current_day = $timeslots{$timeslot_id}{"start"};
					my $table_hide;

					unless ($round_by_day{$current_day->day}) {
						if ($empty) {
							$table_hide = "empty hidden";
						} else {
							$table_hide = "empty";
						}
					}
</%perl>
					<& "/funclib/tablesorter.mas",
						table     => $current_day->day,
						nobuttons => 1
					&>

					<table id="<% $current_day->day %>" class="<% $table_hide %>">

						<thead>
							<tr class="yellowrow">

								<th class="smaller bluetext limit">
									<% $current_day->day_abbr %>
									<& "/funclib/showdate.mas", length => "short", dt => $current_day &>
								</th>

								<th class="smaller limitsmall">
									Rnd
								</th>

								<th class="smaller limit">
									Label
								</th>

								<th class="smaller">
									Type
								</th>

								<th class="smaller nosort">
									Tiebreaker
								</th>

%								if (scalar @sites > 1) {
									<th class="smaller">
										Site
									</th>
%								}

%								if ($event_type ne "congress") {
									<th class="smaller">
										Flights
									</th>
%								}

								<th class="smaller nosort">
									Move
								</th>
							</tr>
						</thead>
						<tbody>
<%perl>
				}

				my @rounds;

				if ($round_by_timeslot{$timeslot_id}) {
					@rounds = sort keys %{$round_by_timeslot{$timeslot_id}};
				}

				my $hidden;
				unless (@rounds) {
					push @rounds, 0;
					$hidden = "hidden";
				}

				my $num_rounds = scalar @rounds;
				my $tiebreakless;

				my $count;

				while (@rounds) {

					my $round_id = shift @rounds;
					my $round;

					if ($round_id > 0) {
						$round = $round_by_timeslot{$timeslot_id}{$round_id};
					} else {
						undef $round_id;
					}

					if ($round && (not defined $round->{protocol})) {
						$tiebreakless = $round;
					}

					if ($num_rounds > 1) {
</%perl>
						<tr class="lirdrow">
							<td colspan="12" class="centeralign semibold orangetext">
								<% $timeslots{$timeslot_id}{"name"} %> has multiple rounds of this event scheduled. <br/>
								That will blow stuff up.<br />
								Please move spare rounds to other timeslots.
							</td>
						</tr>
%					}

					<tr class="<% $round ? "" : "empty ".$empty %>">

						<td class="smaller nowrap nospace padleft">

							<div class="full nospace marvertless">
								<% $timeslots{$timeslot_id}{"name"} %>
							</div>

%							if ($async) {
								<div class="nospace">
									<span class="twofifths nospace">
										<& "/funclib/showtime.mas",
											dt => $timeslots{$timeslot_id}{"start"},
											tz => $tz,
											show_tz => 1
										&>
										&ndash;
									</span>
									<span class="threefifths nospace">
										<& "/funclib/showtime.mas",
											dt => $timeslots{$timeslot_id}{"end"},
											tz => $tz,
											length => "day"
										&>
									</span>
								</div>
%							} else {
								<div class="nospace martopless">
									<& "/funclib/showtime.mas",
										dt => $timeslots{$timeslot_id}{"start"},
										tz => $tz,
										show_tz => 1
									&>
								</div>
%							}
						</td>

						<td class="centeralign nospace">
%							if ($round && ($round->{"published"} || $round->{panels})) {
								<span
									title="You may not delete rounds with existing sections on this screen"
									class="fa fa-sm greentext fa-check"
								></span>

								<input
									type    = "hidden"
									id      = "<% $timeslot_id %>"
									name    = "<% $timeslot_id %><% $count ? "_".$count : ""%>"
									value   = "1"
								>
%							} else {
								<label for="<% $timeslot_id %>">
									<div class="hover" >
										<input
											type    = "checkbox"
											id      = "<% $timeslot_id %>"
											name    = "<% $timeslot_id %><% $count ? "_".$count : ""%>"
											value   = "1"
											onclick = "showMe(<% $timeslot_id %>);"
											<% defined $round_id ? "checked" : "" %>
										>
									</div>
								</label>
%							}
						</td>

						<td class="smallish nospace padleft">
							<span class="hidden">
								<% ($round) ? $round->{number} : "" %>
							</span>

							<div class = "centeralign nospace <% $hidden %> <% $timeslot_id %>" >
								<span class="twofifths leftalign smaller nowrap" title="<% $round_id %>">
									<% ($round) ? $round->{name} : "" %>
								</span>

								<span class="threefifths smallish">
									<input
										type        = "text"
										size        = "8"
										name        = "<% $timeslot_id %><% $count ? "_".$count : ""%>_label"
										placeholder = "Label"
										value       = "<% $round ? $round->{label} : "" %>"
									>
								</span>
							</div>
						</td>

						<td class="centeralign nospace">
							<span class="hidden"><% $round->{type} %></span>
							<div class = "nospace <% $hidden %> <% $timeslot_id %>" >
								<select
									name  = "<% $timeslot_id %><% $count ? "_".$count : ""%>_type"
									class = "smallish plain"
								>
									<option value="prelim"
										<% ($round && $round->{type} eq "prelim") ? "selected" : "" %>
									>Prelim/Preset </option>

%									if ($event->round_robin) {

%									} elsif ($tourn_settings->{"nsda_district"} && $type eq "debate") {

										<option value="highlow"
											<% ($round && $round->{type} eq "highlow") ? "selected" : "" %>
										>Hi/Lo (Prelim after R2)</option>

%									} elsif ($type eq "debate") {
										<option value="highlow"
											<% ($round && $round->{type} eq "highlow") ? "selected" : "" %>
										>Hi/Lo </option>

										<option value="highhigh"
											<% ($round && $round->{type} eq "highhigh") ? "selected" : "" %>
										>Hi/Hi </option>

%									} elsif ($type eq "speech") {
										<option value="snaked_prelim"
											<% ($round && $round->{type} eq "snaked_prelim") ? "selected" : "" %>
										>Snaked Prelim </option>
%									}

									<option value="elim"
										<% ($round && $round->{type} eq "elim") ? "selected" : "" %>
									>Elim </option>

									<option value="final"
										<% ($round && $round->{type} eq "final") ? "selected" : "" %>
									>Final </option>

									<option value="runoff"
										<% ($round && $round->{type} eq "runoff") ? "selected" : "" %>
									>Runoff </option>
								</select>
							</div>
						</td>

						<td class="centeralign nospace smallish">
								<span class="hidden"><% $round->{protocol} %></span>
							<div class = "nospace full <% $hidden %> <% $timeslot_id %>
								<% $round_id > 0 && (not defined $round->{protocol}) ? "dkred" : "" %>"
							>
								<select
									name="<% $timeslot_id %><% $count ? "_".$count : ""%>_protocol"
									class="fixedsmaller plain"
								>
									<option value=""></option>
%									foreach my $protocol (@protocols) {
										<option
											value="<% $protocol->id %>"
											<% 	$round
												&& $round->{protocol} == $protocol->id
													? "selected"
												: ""
											%>
										> <% ucfirst($protocol->name) %> </option>
%									}
								</select>
							</div>
						</td>

%						if (scalar @sites > 1) {
							<td class="centeralign smallish">
								<span class="hidden"><% $round->{site} %></span>
								<div class = "nospace <% $hidden %> <% $timeslot_id %>" >
									<select
										name  = "<% $timeslot_id %><% $count ? "_".$count : ""%>_site"
										class = "fixedsmaller plain"
									>
									<option value="">Select Site</option>
										<option value="">No Site</option>
%										foreach my $site (sort {$a->name cmp $b->name} @sites) {
											<option
												value="<% $site->id %>"
												<% ($round && $site->id == $round->{site})
													? 'selected' : ""
												%>
											><% $site->name %></option>
%										}
									</select>
								</div>
							</td>
%						} else {
							<input
								type  = "hidden"
								name  = "<% $timeslot_id %><% $count ? "_".$count : ""%>_site"
								value = "<% $default_site %>"
							>
%						}

%						if ($event_type ne "congress") {
							<td class="centeralign nospace smallish">
								<span class="hidden"><% $round->{flighted} %></span>
								<div class = "nospace <% $hidden %> <% $timeslot_id %>" >
									<select
										name="<% $timeslot_id %><% $count ? "_".$count : ""%>_flight"
										class="plain"
									>
%										foreach my $value (1 ... 5) {
											<option
												value="<% $value %>"
												<% $round && $round->{flighted} == $value ? "selected" : ""%>
											><% $value %></option>
%										}
									</select>
								</div>
							</td>
%						}

						<td class="centeralign nospace smallish padvertless">
%							if ($round) {
								<div class = "nospace <% $hidden %> <% $timeslot_id %>" >
									<select
										name  = "<% $timeslot_id %><% $count ? "_".$count : ""%>_move"
										class="fixedsmaller plain"
									>
										<option value="">No Move</option>
<%perl>
										foreach my $other_id (
											sort {
												$timeslots{$a}{"start_epoch"} <=> $timeslots{$b}{"start_epoch"}
											} keys %timeslots
										) {

											next if $round_by_timeslot{$other_id};
</%perl>
											<option
												value="<% $other_id %>"
											><% $timeslots{$other_id}{"name"} %></option>
%										}
									</select>
								</div>
%							}
						</td>
					</tr>
%					$count++;
%				}

%				if ($tiebreakless) {
					<tr class="lird">

						<td
							colspan = "3"
							class   = "centeralign semibold smallish redtext"
						>
							DANGER WILL ROBINSON!
						</td>

						<td
							colspan="3"
							class="centeralign semibold smallish redtext"
						>

							<div class="strong">
								<h5 class="nospace">&#65514;&#65514;&#65514;&#65514;&#65514;&#65514;</h5>
							</div>

							Every round must have a tiebreaker set, or you
							cannot enter ballots.  (Tiebreakers are how Tabroom
							knows what scores to ask for).

							<br />
							<br />
								Please correct the red box above.
							<br />
							<br />
						</td>
					</tr>
%				}
%			}

			</tbody>
		</table>

		<div class="liblrow rightalign">
			<input
				type  = "submit"
				value = "Save Rounds"
				class = "thin"
			>
		</div>

		</form>

		<p class='explain'>
			<span class="fa fa-sm fa-check greentext inline"></span>
			You may not alter rounds with sections on this screen;
			doing so deletes and re-create rounds.
			If you want to move rounds on your schedule, go to the schematic
			and use the menu on the Settings tab.
		</p>

	</div>

